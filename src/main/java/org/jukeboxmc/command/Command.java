package org.jukeboxmc.command;

import lombok.Getter;
import org.jukeboxmc.command.annotation.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * @author Kaooot
 * @version 1.0
 */
@Getter
public abstract class Command {

    private String name = "";
    private String description = "";
    private String permission = "";

    private final List<String> aliases = new ArrayList<>();
    private final List<Parameter> parameters = new ArrayList<>();

    public Command() {
        Class<?> clazz = this.getClass();

        if ( clazz.isAnnotationPresent( Name.class ) ) {
            this.name = clazz.getAnnotation( Name.class ).value();
        }

        if ( clazz.isAnnotationPresent( Description.class ) ) {
            this.description = clazz.getAnnotation( Description.class ).value();
        }

        if ( clazz.isAnnotationPresent( Permission.class ) ) {
            this.permission = clazz.getAnnotation( Permission.class ).value();
        }

        if ( clazz.isAnnotationPresent( Aliases.class ) ) {
            Alias[] aliases = clazz.getAnnotation( Aliases.class ).value();

            for ( Alias alias : aliases ) {
                this.aliases.add( alias.value() );
            }
        } else {
            if ( clazz.isAnnotationPresent( Alias.class ) ) {
                this.aliases.add( clazz.getAnnotation( Alias.class ).value() );
            }
        }

        if ( clazz.isAnnotationPresent( ParameterSections.class ) ) {
            ParameterSection[] parameterSections = clazz.getAnnotation( ParameterSections.class ).value();

            for ( ParameterSection parameterSection : parameterSections ) {
                Parameter[] parameters = parameterSection.value();

                this.parameters.addAll( Arrays.asList( parameters ) );
            }
        } else {
            if ( clazz.isAnnotationPresent( ParameterSection.class ) ) {
                Parameter[] parameters = clazz.getAnnotation( ParameterSection.class ).value();

                this.parameters.addAll( Arrays.asList( parameters ) );
            }
        }
    }

    /**
     * This method can be used to define code which is essential for the execution of this {@link Command}
     *
     * @param commandSender who executed the command
     * @param alias         which was used by the {@link CommandSender} to execute this {@link Command}
     * @param arguments     which were given by the {@link CommandSender}
     *
     * @return a fresh {@link CommandOutput} which has been generated by the execution
     */
    public abstract CommandOutput execute( CommandSender commandSender, String alias, Map<String, Object> arguments );
}